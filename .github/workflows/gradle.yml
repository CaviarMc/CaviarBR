name: Build, Tests & Publish

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'
    tags-ignore:
      - 'v*'

jobs:
  build:
#    strategy:
#      matrix:
#        os: [ubuntu-latest, windows-latest]
#    runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest
    steps:
 
    - name: "Git clone"
      uses: actions/checkout@v2
 
   # Install JDK
    - name: "Set up JDK 17"
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt-openj9'

    - name: "Cache BuildTools"
      uses: actions/cache@v2
      id: buildtools_cache
      with:
        path: |
          ~/.m2/repository
        key: ${{ runner.os }}-buildtools_1.8.2
        restore-keys: |
          ${{ runner.os }}-buildtools_1.8.2

    - name: "Run BuildTools repo"
      uses: SpraxDev/Action-SpigotMC@v3
#      if: matrix.os == 'ubuntu-latest'
      with:
       versions: 1.18.2
       generateSrc: false
       generateDoc: false
       disableJavaCheck: false
       forceRun: false
       threads: -1
       buildToolProvider: SpigotMC
 
#    - name: "Run BuildTools repo Windows"
#      if: matrix.os == 'windows-latest' && steps.buildtools_cache.outputs.cache-hit != 'true'
#      run: |
#        curl -O https://hub.spigotmc.org/jenkins/job/BuildTools/lastStableBuild/artifact/target/BuildTools.jar
#        java -jar BuildTools.jar --rev 1.18.2

   # Build Jar with gradle
    - name: "Build with Gradle"
      id: gradle
      uses: gradle/gradle-build-action@v2.1.3
      with:
        arguments: jar
#        arguments: build --scan
        gradle-version: 7.4
#    - name: "Get build-scan-url if build fail"
 #     if: failure()
#      run: echo ❌ ${{ github.workflow }} failed ${{ steps.gradle.outputs.build-scan-url }}
      
    - name: "Upload JAR to other jobs"
      uses: actions/upload-artifact@v3
      with:
          if-no-files-found: error
          name: Output JAR
          path: build/libs/*.jar
 
  build_test:
    runs-on: ubuntu-latest
    steps:

    - name: "Git clone"
      uses: actions/checkout@v2
 
   # Install JDK
    - name: "Set up JDK 17"
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt-openj9'

    - name: "Cache BuildTools Linux"
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository
        key: ${{ runner.os }}-buildtools-1.8.2
        restore-keys: |
          ${{ runner.os }}-buildtools-1.8.2
 
   # Install spigot repo
    - name: "Run BuildTools to git clone Spigot repo"
      uses: SpraxDev/Action-SpigotMC@v3
      with:
       versions: 1.18.2
       generateSrc: false
       generateDoc: false
       disableJavaCheck: false
       forceRun: false
       threads: -1
       buildToolProvider: SpigotMC

   # Build Jar with gradle
    - name: "Test Junit with Gradle"
      id: gradle
      uses: gradle/gradle-build-action@v2.1.3
      with:
        arguments: build
        gradle-version: 7.4

# Start plugin
  start:
    runs-on: ubuntu-latest
    needs: build
    steps:

    - name: "Git clone"
      uses: actions/checkout@v2
 
    - name: "Download JAR from job build"
      uses: actions/download-artifact@v3
      with:
        name: Output JAR
        path: build/libs/

    - name: "Set up JDK 17"
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt-openj9'

    - name: "Cache PaperSpigot Server"
      uses: actions/cache@v2
      with:
        path: test_server/
        key: ${{ runner.os }}-test_server-${{ hashFiles('testServer.sh', 'updatePaper.sh', 'test_server/paperspigot.jar')}}
        restore-keys: |
          ${{ runner.os }}-test_server-

    - name: "Start PaperSpigot Server with plugin"
      run: ./testServer.sh
      shell: bash
      timeout-minutes: 5

# Push .jar to repo Release 
  push:
    runs-on: ubuntu-latest
    needs: [start, build_test]
    steps:

    - name: "Git clone"
      uses: actions/checkout@v2

    - name: "Download JAR from job build"
      uses: actions/download-artifact@v3
      with:
        name: Output JAR
        path: build/libs/

    - name: "Set up JDK 17"
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt-openj9'

    - name: "Install Github Cli"
      run: |
        cd .github
        curl -OL https://github.com/cli/cli/releases/download/v2.6.0/gh_2.6.0_linux_amd64.deb
        sudo dpkg -i gh_2.6.0_linux_amd64.deb
        echo ${{ secrets.GITHUB_TOKEN }} > token
        gh auth login --with-token < token
        rm -rf token
#    - name: "Get projet version in gradle"
#      uses: gradle/gradle-build-action@v2.1.3
#      id: gradlever
#      with:
#        arguments: -q printVersion
#        gradle-version: 7.4

    - name: "Create release"
      run: |
         gh release create v$(./gradlew --build-cache -q printVersion) build/libs/CaviarBR.jar --target main -t "Development Build" --generate-notes -p
#         gh release create v${{ steps.gradlever.outputs.stdout }} build/libs/CaviarBR.jar --target main -t "Test Release" --generate-notes
#        git tag v${{ steps.gradlever.outputs.stdout }}
#        git push origin --tags
#    - name: "Bump version and push tag"
#      id: tag_version
#      uses: mathieudutour/github-tag-action@v6.0
#      with:
#        github_token: ${{ secrets.GITHUB_TOKEN }}
#        custom_tag: ${{ steps.gradlever.outputs.stdout }}
#    - name: "Publish .JAR"
#      uses: marvinpinto/action-automatic-releases@latest
#      with:
#        repo_token: "${{ secrets.GITHUB_TOKEN }}"
#        automatic_release_tag: "v${{ steps.gradlever.outputs.stdout }}"
#        prerelease: false
#        title: "Auto Development Build"
#        files: build/libs/CaviarBR.jar