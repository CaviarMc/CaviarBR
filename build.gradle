plugins {
    id 'java'
}

group = 'fr.caviar'
version = '0.1'
description = 'CaviarBR'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenLocal()
    mavenCentral()
    
    maven {
        url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/')
	    content {
	      includeGroup 'org.bukkit'
	      includeGroup 'org.spigotmc'
	    }
    }

    maven {
        url = uri('https://papermc.io/repo/repository/maven-public/')
    }

}


dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT'
    implementation 'net.kyori:adventure-platform-bukkit:4.1.0'
    compileOnly 'org.spigotmc:spigot:1.17.1-R0.1-SNAPSHOT'
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 8
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
def fullVersion = version + "-" + getGitBranch() + '-' + getCheckedOutGitCommitHash() + "-" + getDate()

jar {
	archiveFileName = 'CaviarBR.jar'
	destinationDirectory = file('build')
	
    manifest {
        attributes "Version": fullVersion
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

processResources {
	outputs.upToDateWhen { false }
    filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
       "plugin_version": fullVersion
    ]
}