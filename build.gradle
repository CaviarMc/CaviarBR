plugins {
	id 'java'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'fr.caviar'
version = '0.1'
description = 'CaviarBR'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
	mavenLocal()
	mavenCentral()

	maven {
		url 'https://hub.spigotmc.org/nexus/content/repositories/public/'
		content {
		  includeGroup 'org.bukkit'
		  includeGroup 'org.spigotmc'
		  includeGroup 'net.md-5'
		}
	}

	maven {
		url = 'https://jitpack.io'
		content {
		  includeGroup 'org.bstats.bStats-Metrics'
		  includeGroup 'dev.jorel.CommandAPI'
		}
	}

	maven {
		url = 'https://papermc.io/repo/repository/maven-public/'
		content {
		  includeGroup 'io.papermc.paper'
		}
	}

	maven {
		url = 'https://ci.nametagedit.com/plugin/repository/everything/'
		content {
			includeGroup 'com.nametagedit'
		}
	}

	maven {
		url = 'https://maven.worldql.com/releases'
		content {
			includeGroup 'com.nftworlds'
		}
	}

	// NTFWorld dep
	maven {
		url = 'https://nexus.scarsz.me/content/groups/public/'
		content {
			includeGroup 'ninja.amp'
			includeGroup 'github.scarsz'
		}
	}
}

dependencies {
	compileOnly 'io.papermc.paper:paper-api:1.18.2-R0.1-SNAPSHOT'
	compileOnly 'org.spigotmc:spigot:1.18.2-R0.1-SNAPSHOT'
	
	compileOnly 'com.nametagedit:nametagedit:4.5.5'
	implementation 'fr.mrmicky:fastboard:1.2.1'
	implementation "dev.jorel.CommandAPI:commandapi-shade:6.5.4"
	//compileOnly "dev.jorel.CommandAPI:commandapi-annotations:6.5.4"
	//annotationProcessor "dev.jorel.CommandAPI:commandapi-annotations:6.5.4"
	
	compileOnly 'com.nftworlds:wrld-payments-api:0.1.6'

	testImplementation 'com.github.seeseemelk:MockBukkit-v1.18:1.15.5'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

	/* EazyNick -> prefix/suffix + skin + nick
	def file = file(new File('libs/EazyNick v3.11.jar'))
	if (!file.exists()) {
		mkdir 'libs'
		new URL('https://www.justix-dev.com/go/dl?id=1&ver=v3.11').withInputStream{ i -> file.withOutputStream{ it << i }}
	}
	compileOnly files('libs/EazyNick v3.11.jar')*/
}

def getCheckedOutGitCommitHash() {
	def gitFolder = "$projectDir/.git/"
	def takeFromHash = 8
	def head = new File(gitFolder + "HEAD").text.split(":")
	def isCommit = head.length == 1
	if (isCommit)
		return head[0].trim().take(takeFromHash)
	def refHead = new File(gitFolder + head[1].trim())
	refHead.text.trim().take takeFromHash
}

def getGitBranch = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

def getDate() {
	def date = new Date()
	def formattedDate = date.format('yyyyMMddHHmmss')
	return formattedDate
}

def fullVersion = version + "-" + getGitBranch() + '-' + getCheckedOutGitCommitHash() + "-" + getDate()

jar {
	archiveFileName = 'CaviarBR.jar'
	destinationDirectory = file('build')
	
	manifest {
		attributes "Version": fullVersion
	}
}

shadowJar {
	archiveFileName = 'CaviarBR.jar'
	dependencies {
		include dependency("dev.jorel.CommandAPI:commandapi-shade:6.5.4")
		include dependency("fr.mrmicky:fastboard:1.2.1")
	}
	relocate 'fr.mrmicky.fastboard', 'fr.caviar.br.scoreboard'
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
		resources {
			srcDirs = ['src/main/resources']
		}
	}

    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

processResources {
	outputs.upToDateWhen { false }
	filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
	   "plugin_version": fullVersion
	]
}

task printVersion {
    doLast {
        println project.version + "-" + getGitBranch() + "-" + getCheckedOutGitCommitHash()
    }
}

tasks.build.dependsOn tasks.shadowJar
